import { Response } from 'node-fetch';
import { URLSearchParams } from 'url';

import { bulkUpdateCommands, updateCommand } from '../src/lib/util';
import { mockClient, mockCommand } from './testUtil';

function mockFakeResponse() {
	const t = new Response(new URLSearchParams({}), {
		headers: {
			'X-RateLimit-Limit': '10',
			'X-RateLimit-Remaining': '10',
			'X-RateLimit-Reset-After': '10',
			'X-RateLimit-Bucket': '10',
			'Retry-After': '10'
		},
		status: 200
	});
	console.log(11_111_111_111_111_111);
	console.log({ aaaaaaa: t.ok });
	return t;
}

describe('discord api call tests', () => {
	const mockFn = jest.fn(mockFakeResponse);
	jest.mock('node-fetch', () => mockFn);
	const mockFetchFn = require('node-fetch') as jest.MockedFunction<typeof fetch>;

	test('bulk update commands', async () => {
		const { client, close } = await mockClient();
		try {
			const commands = Array.from(client.commands.pieces.values());
			await bulkUpdateCommands({ client, commands, guildID: client.developmentServerID });
			expect(mockFetchFn).toHaveBeenCalledWith(
				`${client.discordBaseURL}/applications/${client.applicationID}/guilds/${client.developmentServerID}/commands`,
				{
					method: 'PUT',
					body: JSON.stringify(commands),
					headers: {
						Authorization: 'Bot FAKE_TOKEN',
						'Content-Type': 'application/json'
					}
				}
			);
			expect(mockFetchFn).toHaveReturned();
		} finally {
			close();
		}
	});
	test('bulk update commands globally', async () => {
		const { client, close } = await mockClient();
		try {
			const commands = Array.from(client.commands.pieces.values());
			await bulkUpdateCommands({ client, commands, guildID: client.developmentServerID });
			expect(mockFetchFn).toHaveBeenCalledWith(
				`${client.discordBaseURL}/applications/${client.applicationID}/${client.developmentServerID}/commands`,
				{
					method: 'PUT',
					body: JSON.stringify(commands),
					headers: {
						Authorization: 'Bot FAKE_TOKEN',
						'Content-Type': 'application/json'
					}
				}
			);
			expect(mockFetchFn).toHaveReturned();
		} finally {
			close();
		}
	});

	test('single command update', async () => {
		const { client, close } = await mockClient();
		try {
			await updateCommand({ client, command: mockCommand, guildID: null });
			expect(mockFetchFn).toHaveBeenCalledWith(
				`${client.discordBaseURL}/applications/${client.applicationID}/guilds/${client.developmentServerID}/commands`,
				{
					method: 'POST',
					body: JSON.stringify(mockCommand),
					headers: {
						Authorization: 'Bot FAKE_TOKEN',
						'Content-Type': 'application/json'
					}
				}
			);
			expect(mockFetchFn).toHaveReturned();
		} finally {
			close();
		}
	});
	test('single command update globally', async () => {
		const { client, close } = await mockClient();
		try {
			await updateCommand({ client, command: mockCommand, guildID: null });
			expect(mockFetchFn).toHaveBeenCalledWith(
				`${client.discordBaseURL}/applications/${client.applicationID}/${client.developmentServerID}/commands`,
				{
					method: 'POST',
					body: JSON.stringify(mockCommand),
					headers: {
						Authorization: 'Bot FAKE_TOKEN',
						'Content-Type': 'application/json'
					}
				}
			);
			expect(mockFetchFn).toHaveReturned();
		} finally {
			close();
		}
	});
});
